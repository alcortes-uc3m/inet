[General]
network = ap
parallel-simulation = false
result-dir = results

#user-interface = Cmdenv
user-interface = Tkenv
cmdenv-express-mode = false



# RECORDS
record-eventlog = true
**.module-eventlog-recording = true
**.scalar-recording = true
**.vector-recording = true
# Can't use param-record-as-scalar on non-scalar params
#**.param-record-as-scalar = true
# record of statistics
**.channel.result-recording-modes = all



# SOURCE_NOAP
*.source_noap.routingFile = "ifconf_source_noap.rt"
*.source_noap.tcpdump.dumpFile = "${resultdir}/tcpdump_source_noap.cap"
# use '/usr/sbin/tcpdump -nne -S -tt -r tcpdump_source_noap.cap | egrep -v '10\.2\.1\.1' | less' to visualize

*.source_noap.numSctpApps = 1
*.source_noap.sctpAppType = "SCTPClient"
*.source_noap.sctpApp[*].address = "" # all host addresses
*.source_noap.sctpApp[*].port = 3333
*.source_noap.sctpApp[*].connectAddress = "10.2.3.254"
*.source_noap.sctpApp[*].connectPort = 6666
*.source_noap.sctpApp[*].numPacketsToReceive = 0
*.source_noap.sctpApp[*].requestLength = 536 # maximum to avoit IP fragmentation (with 2 chunks)
*.source_noap.sctpApp[*].thinkTime = 0s
*.source_noap.sctpApp[*].echoFactor = 0
*.source_noap.sctpApp[*].finishEndsSimulation = false
*.source_noap.sctpApp[*].inboundStreams = 1
*.source_noap.sctpApp[*].newPrimary = ""
*.source_noap.sctpApp[*].ordered = true
*.source_noap.sctpApp[*].outboundStreams = 1
*.source_noap.sctpApp[*].primaryTime = 0s
*.source_noap.sctpApp[*].queueSize = 0
*.source_noap.sctpApp[*].reconnectInterval = 0s
*.source_noap.sctpApp[*].startTime = 0.1s
*.source_noap.sctpApp[*].stopTime = 0s
*.source_noap.sctpApp[*].waitToClose = 0s
*.source_noap.sctp.apEnabled = false




# SOURCE_AP
*.source_ap.routingFile = "ifconf_source_ap.rt"
*.source_ap.tcpdump.dumpFile = "${resultdir}/tcpdump_source_ap.cap"
# use '/usr/sbin/tcpdump -nne -S -tt -r tcpdump_source_ap.cap | egrep -v '10\.4\.1\.1' | less' to visualize

*.source_ap.numSctpApps = 1
*.source_ap.sctpAppType = "SCTPClient"
*.source_ap.sctpApp[*].address = "" # all host addresses
*.source_ap.sctpApp[*].port = 3333
*.source_ap.sctpApp[*].connectAddress = "10.4.3.254"
*.source_ap.sctpApp[*].connectPort = 6666
*.source_ap.sctpApp[*].numPacketsToReceive = 0
*.source_ap.sctpApp[*].requestLength = 536 # maximum to avoit IP fragmentation (with 2 chunks)
*.source_ap.sctpApp[*].thinkTime = 0s
*.source_ap.sctpApp[*].echoFactor = 0
*.source_ap.sctpApp[*].finishEndsSimulation = false
*.source_ap.sctpApp[*].inboundStreams = 1
*.source_ap.sctpApp[*].newPrimary = ""
*.source_ap.sctpApp[*].ordered = true
*.source_ap.sctpApp[*].outboundStreams = 1
*.source_ap.sctpApp[*].primaryTime = 0s
*.source_ap.sctpApp[*].queueSize = 0
*.source_ap.sctpApp[*].reconnectInterval = 0s
*.source_ap.sctpApp[*].startTime = 0.1s
*.source_ap.sctpApp[*].stopTime = 0s
*.source_ap.sctpApp[*].waitToClose = 0s
*.source_ap.sctp.apEnabled = true
*.source_ap.sctp.apBurst = 5
*.source_ap.sctp.apPeriod = 1s





# SINK_NOAP
*.sink_noap.routingFile = "ifconf_sink_noap.rt"
*.sink_noap.tcpdump.dumpFile = "${resultdir}/tcpdump_sink_noap.cap"
# use '/usr/sbin/tcpdump -nne -S -tt -r tcpdump_source.cap | egrep -v '10\.2\.1\.1' | less' to visualize

*.sink_noap.numSctpApps = 1
*.sink_noap.sctpAppType = "SCTPServer"
*.sink_noap.sctpApp[*].address = "" # all host addresses
*.sink_noap.sctpApp[*].port = 6666
*.sink_noap.sctpApp[*].echoFactor = 0
*.sink_noap.sctpApp[*].echoDelay = 0s
*.sink_noap.sctpApp[*].delayFirstRead = 0s
*.sink_noap.sctpApp[*].readingInterval = 0s
*.sink_noap.sctpApp[*].messagesToPush = 0
*.sink_noap.sctpApp[*].numPacketsToSendPerClient = 0
*.sink_noap.sctpApp[*].numPacketsToReceivePerClient = 0
*.sink_noap.sctpApp[*].requestLength = 536 # maximum to avoid IP fragmentation (with 2 chunks)
*.sink_noap.sctpApp[*].thinkTime = 0s
*.sink_noap.sctpApp[*].waitToClose = 0s
*.sink_noap.sctpApp[*].finishEndsSimulation = false
*.sink_noap.sctpApp[*].ordered = true
*.sink_noap.sctpApp[*].inboundStreams = 1
*.sink_noap.sctpApp[*].outboundStreams = 1
*.sink_noap.sctpApp[*].queueSize = 0
*.sink_noap.sctp.apEnabled = false




# SINK_AP
*.sink_ap.routingFile = "ifconf_sink_ap.rt"
*.sink_ap.tcpdump.dumpFile = "${resultdir}/tcpdump_sink_ap.cap"
# use '/usr/sbin/tcpdump -nne -S -tt -r tcpdump_source.cap | egrep -v '10\.2\.1\.1' | less' to visualize

*.sink_ap.numSctpApps = 1
*.sink_ap.sctpAppType = "SCTPServer"
*.sink_ap.sctpApp[*].address = "" # all host addresses
*.sink_ap.sctpApp[*].port = 6666
*.sink_ap.sctpApp[*].echoFactor = 0
*.sink_ap.sctpApp[*].echoDelay = 0s
*.sink_ap.sctpApp[*].delayFirstRead = 0s
*.sink_ap.sctpApp[*].readingInterval = 0s
*.sink_ap.sctpApp[*].messagesToPush = 0
*.sink_ap.sctpApp[*].numPacketsToSendPerClient = 0
*.sink_ap.sctpApp[*].numPacketsToReceivePerClient = 0
*.sink_ap.sctpApp[*].requestLength = 536 # maximum to avoid IP fragmentation (with 2 chunks)
*.sink_ap.sctpApp[*].thinkTime = 0s
*.sink_ap.sctpApp[*].waitToClose = 0s
*.sink_ap.sctpApp[*].finishEndsSimulation = false
*.sink_ap.sctpApp[*].ordered = true
*.sink_ap.sctpApp[*].inboundStreams = 1
*.sink_ap.sctpApp[*].outboundStreams = 1
*.sink_ap.sctpApp[*].queueSize = 0
*.sink_ap.sctp.apEnabled = true
*.sink_ap.sctp.apBurst = 5
*.sink_ap.sctp.apPeriod = 0.5s




# ROUTERS
*.router_1a.routingFile = "ifconf_router_1a.rt"
*.router_1z.routingFile = "ifconf_router_1z.rt"
*.router_2a.routingFile = "ifconf_router_2a.rt"
*.router_2z.routingFile = "ifconf_router_2z.rt"
*.router_3a.routingFile = "ifconf_router_3a.rt"
*.router_3z.routingFile = "ifconf_router_3z.rt"
*.router_4a.routingFile = "ifconf_router_4a.rt"
*.router_4z.routingFile = "ifconf_router_4z.rt"





# COMMON
#**.arp.globalARP = true # takes 0.1ms
**.ext[*].filterString = ""
**.ext[*].device = ""

# Router queues:
# default is 100, but simulation takes to long to start dropping packets
**.ppp[*].queue.frameCapacity = 10

# enough for TCP mss of 536 but not bigger to avoid SCTP piggybacking
# WARNING: SCTP learns about this value looking at the routing table
# not through this param!!! (change this value into your routing
# files too)
**.ppp[*].ppp.mtu = 596

 # don't want to delay small packets
**.sctp.nagleEnabled = false

**.sctpApp[*].numRequestsPerSession = 200

*.scenarioManager.script = xmldoc("no-path-failure.xml")


# DEFAULTS
**.tcpdump.verbosity = 0
**.namid = -1
**.ppp[*].queueType = "DropTailQueue"
**.numExtInterfaces = 0

**.sctp.numGapReports = 3
**.sctp.rtoInitial = 3s
**.sctp.rtoMin = 1s
**.sctp.rtoMax = 60s
**.sctp.rtoAlpha = 0.125
**.sctp.rtoBeta = 0.250
**.sctp.maxBurst = 4
**.sctp.assocMaxRetrans = 10
**.sctp.pathMaxRetrans = 5
**.sctp.maxInitRetrans = 8
**.sctp.sackPeriod = 200ms
**.sctp.sackFrequency = 2
**.sctp.reactivatePrimaryPath = false
**.sctp.sendQueueLimit = 0 # 0 is an unlimited queue
**.sctp.validCookieLifetime = 10s
**.sctp.enableHeartbeats = true
**.sctp.hbInterval = 30s
**.sctp.fastRecoverySupported = true
**.sctp.sctpAlgorithmClass = "SCTPAlg"
**.sctp.ccModule = 0
**.sctp.ssModule = 0
**.sctp.swsLimit = 3000
**.sctp.udpEncapsEnabled = false

[Config PathFailureNoRecovery]
*.scenarioManager.script = xmldoc("scenario-path-failure-no-recovery.xml")

[Config PathFailureQuickRecovery]
*.scenarioManager.script = xmldoc("scenario-path-failure-quick-recovery.xml")

[Config PathFailureLateRecovery]
*.scenarioManager.script = xmldoc("scenario-path-failure-late-recovery.xml")

[Config NoPathFailure]
*.scenarioManager.script = xmldoc("scenario-no-path-failure.xml")

# run all with:
# ./run -u Cmdenv -c PathFailureNoRecovery; ./run -u Cmdenv -c PathFailureQuickRecovery ; ./run -u Cmdenv -c PathFailureLateRecovery ; ./run -u Cmdenv -c NoPathFailure
